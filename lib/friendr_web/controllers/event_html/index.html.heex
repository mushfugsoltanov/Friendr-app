<style>
main{
      background-image: url("https://wallpapercave.com/wp/wp2237218.jpg");
      background-size: cover;
      background-position: center;
}
form {
      margin: 0;
      padding: 0;
    }

    .flex-container {
      display: flex;
      align-items: center;
      border-bottom: 2px solid #2c3e50;
      padding: 5px;
    }

    input {
      flex: 1;
      background-color: transparent;
      border: none;
      color: #fff;
      margin-right: 10px;
      outline: none;
    }

    .buton {
      background-color: #2c3e50 !important;
      border: 2px solid #2c3e50;
      color: #fff;
      font-size: 16px;
      padding: 8px 6px;
      border-radius: 5px;
      cursor: pointer;
      outline: none !important;
    }

    .buton:hover {
      background-color: #34495e;
    }


    h2 {
      font-size: 24px;
      font-weight: bold;
      margin-top: 20px;
      margin-bottom: 10px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
      text-align: center !important;
      color: #fff !important;
    }

    th, td {
      border: 1px solid #fff;
      border-bottom: 5px solid #fff !important;
      padding: 12px;
      text-align: center !important;
    }

    th {
      background-color: #2c3e50;
      color: #fff;
      font-weight: bold;
    }

    tr:nth-child(even) {
      background-color: #34495e;
    }

    tr:nth-child(odd) {
      background-color: #2c3e50;
    }

    td {
      color: #fff;
    }

    .text-center {
      text-align: center;
    }

#update_info{
  display: none;
  color: #2c3e50;
  font-weight: bold;
  text-align: center;
  margin: 10px auto; 
}

.button_container{
  display: flex;
  flex-direction: column;
  align-items: center;
  row-gap: 5px !important;
  width: 100% !important;x1
}
.button-right{
  display: none !important;
}

 .flex-container {
      display: flex !important;
      align-items: center !important;
      border-bottom: 2px solid #2c3e50 !important;
      padding: 5px !important;
    }
#location_field{
  display: none !important;}


  .elar {
      max-width: 1000px !important;
      margin: 0 auto;
      padding: 10px;
      background-color: white;
      border-radius: 10px;
      position: relative;
      z-index: 2;
}



tr span{
  color: #fff !important;
  margin: 0 auto !important;
  padding: 0px !important;
  width: 0  !important;
}

tr div{
  color: #fff !important;
  margin: 0 auto !important;
  padding: 0px !important;
}

td{
  padding: 15px 10px !important;}

tr:nth-child(even):hover {
   background-color: #34495e !important;
}

tr:nth-child(odd):hover {
  background-color: #2c3e50 !important;
}


thead tr th{
  padding: 15px 10px !important;
  text-align: center !important;
  font-weight: bold !important;
}

td div span:nth-child(2) a{
  border-radius: 5px !important;
  border: 1px solid #3498db !important;
  padding: 5px 10px !important;
  color: #3498db !important;
  transition: background-color 0.3s ease;
  
}

td div span:last-child a{
  border-radius: 5px !important;
  border: 1px solid #fe5c5c !important;
  padding: 5px 10px !important;
  color: #fe5c5c !important;
  transition: background-color 0.3s ease;
}

td div span:last-child a:hover{
  background-color: #fe5c5c !important;
  color: white !important;
}

td div span:nth-child(2) a:hover{
  background-color: #3498db !important;
  color: white !important;
}

a button{
  background-color: #fff !important;
  color: #27ae60 !important;
  padding: 10px 10px !important;
  border: 2px solid #27ae60 !important;
  border-radius !important;
  cursor: pointer !important;
  font-size: 16px !important;
  transition: background-color 0.3s ease !important; 
}    

a button:hover{
  background-color: #27ae60 !important;
  color: white !important;
}

tbody tr{
  transition: transform 0.3s ease !important; 
}

tbody tr:hover{
  transform: scale(1.03);
}
.passed_info{
  color: #fe5c5c !important;
  font-weight: bold !important;
  font-size: 16px !important;
}
.future_info{
  color: #27ae60 !important;
  font-weight: bold !important;
  font-size: 16px !important;
}

.whitespace-nowrap{
  justify-content: center !important;
  text-align: center !important;
}

.no-events-row{
  background-color: #2c3e50 !important;
  color: #fff !important;
  font-weight: bold !important;
  font-size: 16px !important;
  text-align: center !important;
  pointer-events: none; 
  width: 100% !important;
}
  .filter_container
  {
    display: flex !important;
    justify-content: space-around !important;
    margin-bottom: 20px;
    align-items: center !important;
  }    
</style>
<div class="elar">
<div class="location">
  <.simple_form :let={f} for={@changeset} action={~p"/events"}>
    <.error :if={@changeset.action == :insert}>
      Oops, something went wrong! Please check the errors below.
    </.error>
  <div>
    <span id="update_info"><i>Please wait your location is updating...</i></span>
    <div class="form-group" style="display: none; align-items: center;"  type="hidden">
      <input id="auto_location" name="Location" type="radio" value="Location" class="cursor-pointer" required>
      <label for="auto_location" class="control-label ms-2 cursor-pointer"><i>Give permission to Access you location</i></label>
    </div>
    <.input field={f[:auto_location_detection]} type="hidden" id="auto_location_detection" />
    
    <.input field={f[:location]} type="text" id="location_field" readonly  placeholder="Your Current Location" required />
    </div>


   <:actions class="button-row mt-1">
      <.button phx-disable-with="Updating..." class="button-right" type="hidden">Update</.button>
    </:actions>
  </.simple_form>
  </div>


<div id="content">
 <.header>
     <:actions>
      <.link href={~p"/events/new"}>
        <.button id="new-event">New Event</.button>
      </.link>
    </:actions>
  </.header>
  <form action="" method="get" class="my-4">
    <h1 class="text-4xl font-bold mt-4 mb-8 res_for text-center">Search for Events</h1>
    <div class="flex-container">
      <input type="text" id="event_search_input" name="search_text" placeholder="Search" class="appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-0">
      <button type="submit" id="event_search_button" class="buton flex-shrink-0 text-sm border-4 py-1 px-2 rounded">
        Search
      </button>
    </div>
  </form>

   <div class="filter_container flex mt-5">
    <div class="flex-2 w-64 text-center">
  <.label for="topicFilter" class="block mb-3 text-sm font-medium text-gray-900 dark:text-white">Filter by topics</.label>
  <select id="topicFilter" multiple onchange="showFilteredEvents()" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
    <%= for topic <- @topics do %>
      <option ><%= topic.name %></option>
    <% end %>
  </select>
  </div>

  <div class="flex-2 w-64 text-center">
  <.label for="dateFilter" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Filter by date and time range</.label>
  <.label for="dateFilter" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Start Date:</.label>
  <input type="datetime-local" id="dateFilterStart" onchange="showFilteredEvents()" max="9999-12-31T23:59"  class="mb-3 time bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
    <.label for="dateFilter" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">End Date:</.label>
  <input type="datetime-local" id="dateFilterEnd" onchange="showFilteredEvents()"  max="9999-12-31T23:59" class="time bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
  </div>
  </div>

 

    <.table id="events_all" rows={@events} row_click={&JS.navigate(~p"/events/#{&1}")}>
    <:col :let={event} label="Name" class="event_name" id="event_name">
     <script>
       var currentDate = new Date();
        var eventDate = new Date('<%= event.date %>');
        if (eventDate.getTime() < currentDate.getTime()) {
          document.write('<p><i class="passed_info">Passed Event</i></p>');
        }
        else{
          document.write('<p><i class="future_info">Upcoming Event</i></p>');
        }


</script>
<%= event.name %></:col>
    <:col :let={event} label="Date"><%= event.date %> </:col>
    <:col :let={event} label="Location"><%= event.location %></:col>
    <:col :let={event} label="Topics">
      <%= for topic <- event.topics do %>
        <%= topic.name %>
      <% end %>
    </:col>
    <:col :let={event} label="Accessibility"><%= if event.is_public, do: "Public", else: "Private" %></:col>
     <:col :let={event} label="Distance"><%= if event.distance, do: event.distance, else: "N/A" %> <span>km</span></:col>


    <:action :let={event}>
      <%= if @user.id == event.user_id do %>
          <script>
        var currentDate = new Date();
        var eventDate = new Date('<%= event.date %>');
        if (eventDate.getTime() >= currentDate.getTime()) {
          document.write('<a href="/events/<%= event.id %>/edit">Edit</a>');
        }
      </script>
      <% end %>
    </:action>
    <:action :let={event}>
      <%= if @user.id == event.user_id do %>
        <.link href={~p"/events/#{event}"} method="delete" data-confirm="Are you sure?">
          Delete
        </.link>
      <% end %>
    </:action>
  </.table>
  

</div>
</div>


<script>
function showFilteredEvents() {
    var selectedOptions = document.getElementById('topicFilter').selectedOptions;
    var selectedTopics = Array.from(selectedOptions).map(option => option.text);

    var startDate = document.getElementById("dateFilterStart").value;
    var endDate = document.getElementById("dateFilterEnd").value;

    var eventsTable = document.getElementById('events_all');
    var rows = eventsTable.querySelectorAll('tbody tr');

    rows.forEach(function(row) {
       
        var topicsCell = row.querySelector('td:nth-child(4) div span:last-child');
        var eventTopics = topicsCell.innerText;

        var dateCell = row.querySelector('td:nth-child(2) div span:last-child');
        let trimmedDate = dateCell.innerText.trim();
        var eventDate = new Date(trimmedDate);
        var hasMatchingTopic = selectedTopics.length === 0 || selectedTopics.some(topic => eventTopics.includes(topic));
        var isWithinDateRange = (!startDate || eventDate >= new Date(startDate)) && (!endDate || eventDate <= new Date(endDate));

        if (hasMatchingTopic && isWithinDateRange) {
            row.style.display = 'table-row';
        } else {
            row.style.display = 'none';
        }
    });
}



  document.addEventListener("DOMContentLoaded", function() {
    var topicSelect = document.getElementById('topicFilter');
    var topicOptions = topicSelect.getElementsByTagName('option');


    for (var i = 0; i < topicOptions.length; i++) {
      var topicId = topicOptions[i].value;
      topicOptions[i].id = 'topic_filter_' + topicId;
    }
    
    var eventsTable = document.getElementById('events_all');
    var rows = eventsTable.querySelectorAll('tbody tr');
    rows.forEach(function(row, index) {
       row.setAttribute('id', 'row_' + index);
        var topicsCell = row.querySelector('td:nth-child(2) div span:last-child');
        var eventDate = topicsCell.innerText;
        var eventDate = new Date(eventDate);
       
    });


    var eventsTable = document.getElementById('events_all');
    var event = eventsTable.innerText;

    if (!event) { 
      var noEventsRow = document.createElement('tr');
      var noEventsCell = document.createElement('td');  
      noEventsCell.innerText = 'No events found.';
      noEventsRow.appendChild(noEventsCell);
      eventsTable.appendChild(noEventsRow);
      noEventsRow.style.textAlign = 'center';
      noEventsCell.setAttribute('colspan', '7');
      noEventsRow.classList.add('no-events-row');
      noEventsCell.classList.add('no-events-cell');
      
    }
  });
</script>

<script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false&key=AIzaSyD81PVlVgFCUgsGwlAV7a8GhVrtDYObfhg"></script>

  <script>
   var locationInput = document.getElementById('location_field');
   var autoLocation = document.getElementById('auto_location');
   var autoLocationDetectionInput = document.getElementById('auto_location_detection');
   var content = document.getElementById('content');
   
   var autoLocationDetection = <%= @changeset.data.auto_location_detection %>;
   
   var locationFetchedEvent = JSON.parse(localStorage.getItem('locationFetchedEvent'));
   var updateInfo = document.getElementById('update_info');
   let geoText = '';
   var searchFriendsButton = document.querySelector('#search-friends');
   const searchForm = document.querySelector('.my-4');

  window.onload = function () {
  if (window.location.href === "http://localhost:4000/events" || window.location.href === "http://localhost:4001/events" ) {
  if (autoLocationDetection && !locationFetchedEvent) {
    updateInfo.style.display = "block";
    content.style.pointerEvents = 'none';
    autoLocation.checked = true;
    locationInput.setAttribute('readonly', 'true');
    fetchUserLocation();
    localStorage.setItem('locationFetchedEvent', true);
  } else {
    localStorage.setItem('locationFetchedEvent', 'false');
    
  }
}
}

function fetchReverseGeocodingData() {
    let [lat, lng] = geoText.split(',');
    var latlng = new google.maps.LatLng(lat, lng);
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({ 'latLng': latlng }, function (results, status) {
        if (status !== google.maps.GeocoderStatus.OK) {
            locationInput.placeholder = "Error fetching address. Please try again.";
            locationInput.value = "";
        }
        if (status === google.maps.GeocoderStatus.OK) {
            var address = results[0].formatted_address;
            geoText = address;
            locationInput.value = address;
            document.querySelector('.button-right').click();
            
        }
    });
}

function fetchUserLocation() {
    if (geoText === '') {
        if (navigator.geolocation) {
            navigator.geolocation.watchPosition(retrievePosition, handleNoPosition);
            navigator.geolocation.clearWatch(retrievePosition);
        } else {
            locationInput.placeholder = 'Geolocation is not supported by this browser.';
        }
    } else {
        locationInput.value = geoText;
    }
}

function retrievePosition(position) {
    if (geoText === '') {
        geoText = position.coords.latitude + ',' + position.coords.longitude;
        locationInput.value = "";
        locationInput.placeholder = "Fetching address based on your location...";
        fetchReverseGeocodingData();  
        
    }
}

function handleNoPosition(position) {
    if (geoText === '') {
        locationInput.placeholder = 'Unable to retrieve your location.';
    }
   
}
</script>
