<style>
.button-row {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  background-color:greeen !important;
  margin-top: 0px;
}

.button-left,
.button-right {
  margin: 0;
}

.button-left {
  display: inline-block;
  text-decoration: none;
  border-radius: 5px;
}
.button-right {
  background: transparent;
  border: 1px solid green;
  color: green;
  transition: all 0.3s;

}
.button-right:hover {
  background: green;
  color: white;
}
 #map-container {
    display: none;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s ease-out;
  }

#map {
    height: 300px;
    width: 100%;
    margin-top: 10px;
  }

   .edit_for {
    position: relative;
    z-index: 2 !important;
    padding: 30px !important;
  }
  .profile-container{
    padding: 80px !important;
    width:  800px !important;
    background-color: #fff !important;
    border-radius: 10px !important;
  }
   main{
      background-image: url("https://th.bing.com/th/id/R.4b051e5d69ed2f27c2b2295dade8426d?rik=XqJA%2fJAgRYqGSw&riu=http%3a%2f%2fstatic.guim.co.uk%2fsys-images%2fGuardian%2fPix%2fpictures%2f2014%2f9%2f3%2f1409755613016%2fFriends-season-10-014.jpg&ehk=u6KIb7oEbC2OskrdCMXkaUXhgRbF5v5MbLzugblZ5Co%3d&risl=&pid=ImgRaw&r=0");
    }
    .edit_head{
      text-align: center;
      font-size: 30px;
      font-weight: 600;
      color: #000;
      margin-bottom: 30px;
      color: #2c3e50;
    }

</style>



<div class="edit_for mx-auto">
<div class="mx-auto profile-container">
  <h1 class="edit_head">Edit Profile</h1>
  <.simple_form :let={f} for={@changeset} action={~p"/user/profile"} >

    <.error :if={@changeset.action}>
      Oops, something went wrong! Please check the errors below.
    </.error>

    <.input field={f[:name]} type="text" label="Name" required  />
    <.input field={f[:date_of_birth]} type="date" label="Date of Birth"  required />
    <.input field={f[:phone]} type="text" label="Phone"  required />
    <.input field={f[:description]} type="text" label="Bio"  required />

    <div class="mt-5">
      <label for="interests" class="control-label text-sm text-zinc-800 font-semibold">Select Your Interests</label><br />
      <select id="interests" name="interests[]"multiple="multiple" required="required"
              class="w-full rounded-lg mt-2 cursor-pointer border-zinc-300 focus:border-zinc-400 focus:ring-0">
        <%= for topic <- @topics do %>
          <option
            value={topic.id}
            selected={Enum.any?(@user.interests, &(&1.topic_id == topic.id && &1.relationship == 1))}>
            <%= topic.name %>
          </option>
        <% end %>
      </select>
    </div>

    <div class="mt-5">
      <label for="hates" class="control-label text-sm text-zinc-800 font-semibold">Select Your Hates</label><br />
      <select id="hates" name="hates[]" multiple="multiple" required="required"
              class="w-full rounded-lg mt-2 cursor-pointer border-zinc-300 focus:border-zinc-400 focus:ring-0">
        <%= for topic <- @topics do %>
          <option 
            value={topic.id}
            selected={Enum.any?(@user.interests, &(&1.topic_id == topic.id && &1.relationship == 0))}>
            <%= topic.name %>
          </option>
        <% end %>
      </select>
    </div>

    <div>
      <div class="flex justify-evenly">
      <div class="form-group" style=" display: inline-flex; align-items: center;">
        <input id="auto_location" name="Location" type="radio" value="Location" class="cursor-pointer"  >
        <label for="auto_location" class="control-label ms-2 cursor-pointer"><i>Auto Location</i></label>
      </div>

      <div class="form-group" style=" display: inline-flex; align-items: center;">
        <input id="manual_location" name="Location" type="radio" value="Location" class="cursor-pointer" >
        <label for="manual_location" class="control-label ms-2 cursor-pointer"><i>Enter Address</i></label>
      </div>

      <div class="form-group" style=" display: inline-flex; align-items: center;">
        <input id="pickLocationBtn" name="Location" type="radio" value="Location" class="cursor-pointer" >
        <label for="pickLocationBtn" class="control-label ms-2 cursor-pointer"><i>Pick Location on Map</i></label>
      </div>
    </div>
    <.input field={f[:location]}  id="location_field"  type="text"  required />
    <.input field={f[:auto_location_detection]} type="hidden" id="auto_location_detection" />
    <.input field={f[:manual_detection]} type="hidden" id="manual_detection" />

    </div>
      <div id="map-container">
    <div id="map"></div>
  </div>

    <:actions class="button-row mt-1">
      <.link navigate={~p"/user/profile"} class="button-left"> &larr;  Back to profile</.link>
      <.button phx-disable-with="Updating..." class="button-right" id="save">Update</.button>
    </:actions>
  </.simple_form>


  </div>







<script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false&key=AIzaSyD81PVlVgFCUgsGwlAV7a8GhVrtDYObfhg"></script>

  <script>


   var locationInput = document.getElementById('location_field');
   var autoLocation = document.getElementById('auto_location');
   var manualLocation = document.getElementById('manual_location');
   var autoLocationDetectionInput = document.getElementById('auto_location_detection');
   var manualLocationDetectionInput = document.getElementById('manual_detection');
   let geoText = '';
   var map;
   var mapMarkers = [];

 var autoLocationDetection = <%= @changeset.data.auto_location_detection %>;
 var manualDetectionchecker = <%= @changeset.data.manual_detection %>;

 function clearMapMarkers() {
    mapMarkers.forEach(function (marker) {
      marker.setMap(null);
    });
    mapMarkers = [];
  }

  function enableMapInteraction() {
    // Clear existing markers on the map
    clearMapMarkers();

    // Allow the user to click on the map to pick a new location
    map.addListener('click', function (event) {
      // Clear existing markers on the map
      clearMapMarkers();

      // Add a marker at the clicked location
      var marker = new google.maps.Marker({
        position: event.latLng,
        map: map,
        title: 'Selected Location'
      });

      // Save the marker in an array for future reference
      mapMarkers.push(marker);

      // Update the location field with the new coordinates
        var geocoder = new google.maps.Geocoder();
      geocoder.geocode({ 'location': event.latLng }, function (results, status) {
        if (status === google.maps.GeocoderStatus.OK) {
          if (results[0]) {
            // Update the location field with the address
            locationInput.value = results[0].formatted_address;
          } else {
            console.error('No results found');
          }
        } else {
          console.error('Geocoder failed due to: ' + status);
        }
      });
    });
  }

  function initMap() {
    // Set the initial center of the map (you can adjust this based on your needs)
    var initialCenter = { lat: 0, lng: 0 };

    // Get the location entered by the user
    var enteredLocation = locationInput.value;

    // Create a new map
    map = new google.maps.Map(document.getElementById('map'), {
      center: initialCenter,
      zoom: 15, // Set the initial zoom level
      mapTypeId: google.maps.MapTypeId.ROADMAP // Set the map type
    });

    // Try to geocode the entered location and center the map
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({ 'address': enteredLocation }, function (results, status) {
      if (status === google.maps.GeocoderStatus.OK) {
        var userLocation = results[0].geometry.location;

        // Center the map on the user's entered location
        map.setCenter(userLocation);

        // Add a marker at the user's entered location
        var marker = new google.maps.Marker({
          position: userLocation,
          map: map,
          title: 'Entered Location'
        });
        mapMarkers.push(marker);
      } else {
        // Handle geocoding error
        console.error('Geocode was not successful for the following reason: ' + status);
      }
    });
  }
  function updateMap() {
      var locationInput = document.getElementById('location_field');
      var enteredLocation = locationInput.value;

      // Try to geocode the entered location and update the map
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode({ 'address': enteredLocation }, function (results, status) {
        if (status === google.maps.GeocoderStatus.OK) {
          var userLocation = results[0].geometry.location;

          // Center the map on the user's updated location
          map.setCenter(userLocation);

          // Clear existing markers on the map
          mapMarkers.forEach(function (marker) {
            marker.setMap(null);
          });

          // Add a marker at the user's updated location
          var marker = new google.maps.Marker({
            position: userLocation,
            map: map,
            title: 'Updated Location'
          });

          // Save the marker in an array for future reference
          mapMarkers.push(marker);
        } else {
          // Handle geocoding error
          console.error('Geocode was not successful for the following reason: ' + status);
        }
      });
    }

  // Add a click event listener to the button
  document.getElementById('pickLocationBtn').addEventListener('click', () => {
    autoLocationDetectionInput.value = "false";
    manualLocationDetectionInput.value = "false";
    enableMapInteraction();
    locationInput.setAttribute('readonly', 'true');
    document.getElementById('map-container').style.display = 'block';
    document.getElementById('map-container').style.maxHeight = '500px';

});



   window.onload = function () {
        initMap();
      // ... (your existing onload code) ...

      // Listen for changes in the location field and update the map
      var locationInput = document.getElementById('location_field');
      locationInput.addEventListener('input', updateMap);
    // Set initial state based on auto_location_detection value
    if (autoLocationDetection) {
       autoLocation.setAttribute('checked', 'true');
    } else {
      if (manualDetectionchecker) {
        manualLocation.setAttribute('checked', 'true');
        locationInput.removeAttribute('readonly');
      } else {
        pickLocationBtn.setAttribute('checked', 'true');
        locationInput.setAttribute('readonly', 'true');
        locationInput.placeholder = "Pick your current location from map";
      }
    }

    if (pickLocationBtn.checked) {
      enableMapInteraction();
      locationInput.setAttribute('readonly', 'true');
      document.getElementById('map-container').style.display = 'block';
      document.getElementById('map-container').style.maxHeight = '500px';
    }
  };


autoLocation.addEventListener('click', () => {
    locationInput.value = '';
    locationInput.setAttribute('readonly', 'true');
    locationInput.placeholder = "Fetching your current location...";
    autoLocationDetectionInput.value = "true";
    document.getElementById('map-container').style.display = 'none';
    fetchUserLocation();
});

manualLocation.addEventListener('click', () => {
    locationInput.placeholder = "Enter a specific address (e.g., Kivi 4, 51009 Tartu, Estonia)";
    locationInput.removeAttribute('readonly');
    locationInput.value = '';
    locationInput.focus();
    autoLocationDetectionInput.value = "false";
    document.getElementById('map-container').style.display = 'none';
    manualLocationDetectionInput.value = "true";
});

function fetchReverseGeocodingData() {
    let [lat, lng] = geoText.split(',');
    var latlng = new google.maps.LatLng(lat, lng);
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({ 'latLng': latlng }, function (results, status) {
        if (status !== google.maps.GeocoderStatus.OK) {
            locationInput.placeholder = "Error fetching address. Please try again.";
            locationInput.value = "";
        }
        if (status === google.maps.GeocoderStatus.OK) {
            var address = results[0].formatted_address;
            geoText = address;
            locationInput.value = address;
            updateMap();

        }
    });
}

function fetchUserLocation() {
    if (geoText === '') {
        if (navigator.geolocation) {
            navigator.geolocation.watchPosition(retrievePosition, handleNoPosition);
            navigator.geolocation.clearWatch(retrievePosition);

        } else {
            locationInput.placeholder = 'Geolocation is not supported by this browser.';
        }
    } else {
        locationInput.value = geoText;
    }
}

function retrievePosition(position) {
    if (geoText === '') {
        geoText = position.coords.latitude + ',' + position.coords.longitude;
        locationInput.value = "";
        locationInput.placeholder = "Fetching address based on your location...";
        fetchReverseGeocodingData();
    }
}

function handleNoPosition(position) {
    if (geoText === '') {
        locationInput.placeholder = 'Unable to retrieve your location.';
    }
}

</script>
<script>
 document.addEventListener('DOMContentLoaded', function () {
    var hatesSelect = document.getElementById('hates');
    var interestsSelect = document.getElementById('interests');
    var hateOptions = hatesSelect.getElementsByTagName('option');
    var interestOptions = interestsSelect.getElementsByTagName('option');


    for (var i = 0; i < hateOptions.length; i++) {
      var topicId = hateOptions[i].value;
      hateOptions[i].id = 'hates_' + topicId;
    }

    for (var i = 0; i < interestOptions.length; i++) {
      var topicId = interestOptions[i].value;
      interestOptions[i].id = 'interests_' + topicId;
    }
  });

</script>

</div>
